#include <iostream>
#include <time.h>
#include <SDL.h>

#include "vanilla.h"
#include "geometry.h"
#include "render.h"
#include "FreeTypeHelper.h"
#include "SDLHelper.h"
#include "components.h"

int main(int args, char* argsc[])
{
    const int screenWidth = 640;
    const int screenHeight = 640;
    srand(time(NULL));
    SDL_Init(SDL_INIT_VIDEO);
    SDL_GL_SetAttribute(SDL_GL_MULTISAMPLEBUFFERS,1);
    SDL_GL_SetAttribute(SDL_GL_MULTISAMPLESAMPLES,8);
    SDL_GL_SetAttribute(SDL_GL_ACCELERATED_VISUAL, 1);

    GLContext::init(screenWidth,screenHeight);

//SDL_SetHint( SDL_HINT_RENDER_SCALE_QUALITY, "1" );

    glEnable(GL_MULTISAMPLE);

    SDL_StopTextInput();
    ViewPort::init(screenWidth,screenHeight);
    //RenderProgram::init(screenWidth,screenHeight);

      //  glEnable(GL_MULTISAMPLE);
//

    //glDisable(GL_DEPTH_TEST);

    Font::init(screenWidth, screenHeight);
    PolyRender::init(screenWidth,screenHeight); //rect, angle, z, effect

    SDL_Event e;
    bool quit = false;
    glClearColor(1,1,1,1);
    bool eventsEmpty = true;

    glm::vec2 a = {100,100};
    glm::vec2 b = {200,200};
    glm::vec2 c = {400,100};
    glm::vec2 d = {100,500};

    int dimen = 1;
    int instances = screenWidth*screenHeight/dimen/dimen;

    Font alef("projects/alef.ttf");
    BaseAnimation anime("turtFrog.png",1,5,2, {0,0,4,1});
    Entity entity;
    BaseAnimationComponent comp(entity,anime);
    //glDepthMask(GL_FALSE);
    //swarm.addBoid(fish);
    //glEnable(GL_DEPTH_TEST);
    //SDL_GL_SetSwapInterval(0);
    glm::vec2 score = {0,0};
    while (!quit)
    {
        while (SDL_PollEvent(&e))
        {
            eventsEmpty = false;
            KeyManager::update(e);
            MouseManager::update(e);
            if (e.type == SDL_QUIT)
            {
                quit = true;
            }
        }
        if (eventsEmpty)
        {
            KeyManager::update(e);
            MouseManager::update(e);
        }
        glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);


        comp.request(ViewPort::animeProgram,{{0,0,64,64},0});
        //sprite.draw(RenderProgram::basicProgram,data,instances);
        PolyRender::requestRect({1,0,64,64},{1,0,0,1},true,0,1);
                //Font::tnr.requestWrite({convert(DeltaTime::deltaTime),{0,0,100,100},0,{0,0,0,1},1});
        //SpriteManager::request(transFish,betterProgram,glm::vec4(200,300,100,100));

        PolyRender::render();

        SpriteManager::render();

        GLContext::update();
        DeltaTime::update();
        //

        eventsEmpty = true;


        //std::cout << DeltaTime::deltaTime << "\n";
    }
    return 0;
}
