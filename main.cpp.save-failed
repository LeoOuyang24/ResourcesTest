#include <iostream>
#include <time.h>
#include <SDL.h>

#include "vanilla.h"
#include "render.h"
#include "FreeTypeHelper.h"
#include "SDLHelper.h"
#include "components.h"

#include "bacteria.h"


int main(int args, char* argsc[])
{
    const int screenWidth = 640;
    const int screenHeight = 640;
    srand(time(NULL));
    SDL_Init(SDL_INIT_VIDEO);
    SDL_GL_SetAttribute(SDL_GL_MULTISAMPLEBUFFERS,1);
    SDL_GL_SetAttribute(SDL_GL_MULTISAMPLESAMPLES,8);
    SDL_GL_SetAttribute(SDL_GL_ACCELERATED_VISUAL, 1);

    SDL_Window* window = SDL_CreateWindow("Project",SDL_WINDOWPOS_CENTERED, SDL_WINDOWPOS_CENTERED,screenWidth, screenHeight, SDL_WINDOW_OPENGL);

//SDL_SetHint( SDL_HINT_RENDER_SCALE_QUALITY, "1" );

    SDL_StopTextInput();
    SDL_GL_CreateContext(window);

    RenderProgram::init(screenWidth,screenHeight);

      //  glEnable(GL_MULTISAMPLE);
//

    //glDisable(GL_DEPTH_TEST);

    Font::init(screenWidth, screenHeight);
    PolyRender::init(screenWidth,screenHeight);
    SDL_Event e;
    bool quit = false;
    glClearColor(0,.5,1,1);
    bool eventsEmpty = true;

   // ReusableVector<int> rVec;
    DeltaTime alarm;
    alarm.set();

    int amount = 10000;

    EntityPosManager manager;
    manager.init({0,0,screenWidth,screenHeight});

    for (int i = 0; i < amount; ++i)
    {
        manager.addEntity(*(bacteriaAssemble()));
    }

    std::vector<Entity*> entities;
    BiTree tree({0,0,screenWidth,screenHeight});
    for (int i =0; i < amount; ++i)
    {
        auto bacteria = bacteriaAssemble();
        entities.push_back(bacteria);
        tree.insert(*bacteria->getComponent<RectComponent>());
    }

    while (!quit)
    {
        while (SDL_PollEvent(&e))
        {
            eventsEmpty = false;
            KeyManager::getKeys(e);
            MouseManager::update(e);
            if (e.type == SDL_QUIT)
            {
                quit = true;
            }
        }
        if (eventsEmpty)
        {
            KeyManager::getKeys(e);
            MouseManager::update(e);
        }
        glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

        //std::cout << "Collisions: " << accum << "\n";
        //manager.update();
        //manager.getQuadTree()->render({0,0});

        tree.map([](Positional& p){
                 RectComponent* comp = static_cast<RectComponent*>(&p);
                 comp->getEntity().update();
                 tree.remove(p);
                 tree.insert(p);
                 PolyRender::requestRect(comp->getRect(),{0,0,0,1},true,0,0);
                 });
        tree.processCollisions([](RectPositional& r1, RectPositional& r2){
                               PolyRender::requestRect(r1.getRect(),{1,0,0,1},true,0,1);
                               PolyRender::requestRect(r2.getRect(),{0,1,0,1},true,0,1);
                               });

        PolyRender::render();
        SpriteManager::render();
       // Font::alef.write(Font::wordProgram,"asdf",320,320,0,1,{0,0,0});
        SDL_GL_SwapWindow(window);
        DeltaTime::update();
        eventsEmpty = true;
        Font::tnr.requestWrite({convert(DeltaTime::deltaTime),{0,0,100,100},0,{0,0,0,1},1});

        //std::cout << DeltaTime::deltaTime << std::endl;
    }
    return 0;
}
